;                    _____________________________________________
;                  [>                                             <]
;Project           [> ARCbbs                                      <]
;Author            [> Hugo Fiennes                                <]
;Date started      [> 31-December-1991                            <]
;                  [>                                             <]
;Module name       [> Pipe module                                 <]
;Current version   [> 00.04                                       <]
;Version date      [> 05-March-1993                               <]
;State             [> Unfinished                                  <]
;                  [>                                             <]
;                  [>    This source is COPYRIGHT © 1993 by       <]
;                  [>      Hugo Fiennes of The Serial Port        <]
;                  [>_____________________________________________<]

; SWI values

WriteC        * &00
CLI           * &05
Byte          * &06
SerialOp      * &57
Find          * &0d
File          * &08
Module        * &1e
GBPB          * &0c
Args          * &09
IntOn         * &13
IntOff        * &14

inused        * 4
inhead        * 8
intail        * 12
outfree       * 16
outhead       * 20
outtail       * 24

SIZE          * 2048
SIZESHIFT     * 11

V_Bit         * (1:SHL:28)
C_Bit         * (1:SHL:29)

r0 RN 0
r1 RN 1
r2 RN 2
r3 RN 3
r4 RN 4
r5 RN 5
r6 RN 6
r7 RN 7
r8 RN 8
r9 RN 9
r10 RN 10
r11 RN 11
r12 RN 12
r13 RN 13
r14 RN 14
pc RN 15

X             * &00020000 ; mask to make a swi a RISC OS v-error swi

;--- Module header ------------------------------------------------------------

startmodule
        DCD  0                       ; No start code
        DCD  (init-startmodule)      ; Initialise opens files
        DCD  (final-startmodule)     ; Finalise closes files
        DCD  0                       ; No service call handler
        DCD  (title-startmodule)     ; Title of module
        DCD  (help-startmodule)      ; Help text for module
        DCD  0                       ; No commands
        DCD  &41080                  ; SWI base
        DCD  (swih-startmodule)      ; SWI handler
        DCD  (swinames-startmodule)  ; SWI names
        DCD  0                       ; No decoding code

title
        = "ARCbbs_Pipes",0

help
        = "ARCbbs Pipes",9,"0.04 (05 Mar 1993) © Hugo Fiennes",0

        ALIGN

;--- Pointers to areas --------------------------------------------------------

pointer_inputbuffers
        DCD   0

pointer_outputbuffers
        DCD   0

pointer_linestatus
        DCD   0

;--- Initialise module --------------------------------------------------------

init
        STMFD r13!,{r1-r9,r14}

        MOV   r0,#0
        STR   r0,pointer_linestatus
        STR   r0,pointer_inputbuffers
        STR   r0,pointer_outputbuffers

        ; Allocate memory for line status
        MOV   r0,#6
        MOV   r3,#(16*32)
        SWI   X+Module
        BVS   init_error
        STR   r2,pointer_linestatus

        ; Allocate memory for input (slave) buffers
        MOV   r0,#6
        MOV   r3,#(SIZE*16)
        SWI   X+Module
        BVS   init_error
        STR   r2,pointer_inputbuffers

        ; Allocate memory for output (slave) buffers
        MOV   r0,#6
        MOV   r3,#(SIZE*16)
        SWI   X+Module
        BVS   init_error
        STR   r2,pointer_outputbuffers

        ; Clear out line status block
        MOV   r0,#0
        LDR   r1,pointer_linestatus
        MOV   r2,#128
init_l
        STR   r0,[r1],#4
        SUBS  r2,r2,#1
        BNE   init_l

        MOV   r4,#15
init_2
        BL    clearinput
        BL    clearoutput
        SUBS  r4,r4,#1
        BGE   init_2
 
        ; Return
        LDMFD r13!,{r1-r9,pc}

init_error
        LDR   r2,pointer_linestatus
        CMP   r2,#0
        MOVNE r0,#7
        SWINE X+Module

        LDR   r2,pointer_inputbuffers
        CMP   r2,#0
        MOVNE r0,#7
        SWINE X+Module

        LDR   r2,pointer_outputbuffers
        CMP   r2,#0
        MOVNE r0,#7
        SWINE X+Module

        ADR   r0,init_errormsg

        LDMFD r13!,{r1-r9,r14}
        ORRS  pc,r14,#V_Bit

init_errormsg
        = "Can't get memory for buffers",0
        ALIGN

;--- Finalise code ------------------------------------------------------------

final
        STMFD r13!,{r0-r9,r14}

        LDR   r2,pointer_linestatus
        CMP   r2,#0
        MOVNE r0,#7
        SWINE X+Module

        LDR   r2,pointer_inputbuffers
        CMP   r2,#0
        MOVNE r0,#7
        SWINE X+Module

        LDR   r2,pointer_outputbuffers
        CMP   r2,#0
        MOVNE r0,#7
        SWINE X+Module

        LDMFD r13!,{r0-r9,pc}

;--- SWI handler --------------------------------------------------------------

swih
        CMP   r11,#((endoftable-table)/4)
        ADDCC pc,pc,r11,LSL#2
        B     unknownswi

table
        B     readstatus
        B     writestatus

        B     inputstatus
        B     inputread
        B     outputstatus
        B     outputwrite

        B     clearinput
        B     clearoutput

        B     inputwrite
        B     outputread

        B     resetstate

endoftable

unknownswi
        ADRL  r0,errmsg
        ORRS  pc,r14,#(1:SHL:28)

errmsg
        DCD  &1e6
        =     "Unknown ARCbbs_Pipes operation",0

;--- SWI name decode table ----------------------------------------------------

swinames
        = "ARCbbsPipes",0     ; Group prefix

        ; Overall line status
        = "ReadStatus",0
        = "WriteStatus",0

        ; Input/output buffers (slave end)
        = "InputStatus",0
        = "InputRead",0
        = "OutputStatus",0
        = "OutputWrite",0
        = "ClearInput",0
        = "ClearOutput",0

        ; Input/output buffers (host end)
        = "InputWrite",0
        = "OutputRead",0

        ; Reset request/reply protocol
        = "ResetState",0
        = 0

;--- Actual functions ---------------------------------------------------------

;
; Read status
;
; in  r0 - Line number
; out r0 - Line status word
;
readstatus
        CMP     r0,#15
        MOVGT   pc,r14
        
        LDR     r1,pointer_linestatus
        ADD     r1,r1,#1
        LDRB    r0,[r1,r0,LSL#5]
        
        MOV     pc,r14

;
; Write status
;
; in  r0 - Line number
;     r1 - Line status word
;
writestatus
        CMP     r0,#15
        MOVGT   pc,r14
        
        LDR     r2,pointer_linestatus
        ADD     r2,r2,#1
        STRB    r1,[r2,r0,LSL#5]
        
        MOV     pc,r14

;
; Input status
;
; in  r0 - line number
; out r0 - bytes waiting
;
inputstatus
        CMP     r0,#15
        MOVGT   pc,r14

        LDR     r1,pointer_linestatus
        ADD     r1,r1,r0,LSL#5
        LDR     r0,[r1,#inused]

        MOV     pc,r14

;
; Input read
;
; in  r0 - line number
; out r0 - next byte or -1 if no bytes
;
inputread
        CMP     r0,#15
        MOVGT   pc,r14

        ; Check there is stuff there
        LDR     r1,pointer_linestatus
        ADD     r1,r1,r0,LSL#5
        LDR     r2,[r1,#inused]
        CMP     r2,#0
        MOVEQ   r0,#-1
        ORREQS  pc,r14,#C_Bit

        ; Take one off buffer count
        SUB     r2,r2,#1
        STR     r2,[r1,#inused]

        ; Get data and increment tail
        LDR     r3,pointer_inputbuffers
        ADD     r3,r3,r0,LSL#SIZESHIFT
        LDR     r2,[r1,#intail]
        LDRB    r0,[r3,r2]
        ADD     r2,r2,#1
        CMP     r2,#SIZE
        MOVEQ   r2,#0
        STR     r2,[r1,#intail]

        BICS    pc,r14,#C_Bit

;
; Output status
;
; in  r0 - line number
; out r0 - bytes free
;
outputstatus
        CMP     r0,#15
        MOVGT   pc,r14

        LDR     r1,pointer_linestatus
        ADD     r1,r1,r0,LSL#5
        LDR     r0,[r1,#outfree]
        
        MOV     pc,r14

;
; Output write
;
; in  r0 - line number
;     r1 - byte to be inserted
;
outputwrite
        CMP     r0,#15
        MOVGT   pc,r14

        ; Check there is room there
        LDR     r3,pointer_linestatus
        ADD     r3,r3,r0,LSL#5
        LDR     r2,[r3,#outfree]
        CMP     r2,#0
        MOVEQ   r0,#-1
        ORREQS  pc,r14,#C_Bit

        ; Take one off buffer freecount
        SUB     r2,r2,#1
        STR     r2,[r3,#outfree]

        ; Put data and increment head
        LDR     r2,pointer_outputbuffers
        ADD     r0,r2,r0,LSL#SIZESHIFT
        LDR     r2,[r3,#outhead]
        STRB    r1,[r0,r2]
        ADD     r2,r2,#1
        CMP     r2,#SIZE
        MOVEQ   r2,#0
        STR     r2,[r3,#outhead]

        MOV     r0,#0
        BICS    pc,r14,#C_Bit

;
; Clear input
;
; in  r0 - line number
;
clearinput
        CMP     r0,#15
        MOVGT   pc,r14

        LDR     r1,pointer_linestatus
        ADD     r1,r1,r0,LSL#5
        
        MOV     r0,#0
        STR     r0,[r1,#inused]
        STR     r0,[r1,#inhead]
        STR     r0,[r1,#intail]

        MOV     pc,r14
;
; Clear output
;
; in  r0 - line number
;
clearoutput
        CMP     r0,#15
        MOVGT   pc,r14

        LDR     r1,pointer_linestatus
        ADD     r1,r1,r0,LSL#5
        
        MOV     r0,#SIZE
        STR     r0,[r1,#outfree]
        MOV     r0,#0
        STR     r0,[r1,#outhead]
        STR     r0,[r1,#outtail]

        MOV     pc,r14
;
; Input write
;
; in  r0 - line number
;     r1 - byte to be inserted
;
inputwrite
        CMP     r0,#15
        MOVGT   pc,r14

        ; Check there is room there
        LDR     r3,pointer_linestatus
        ADD     r3,r3,r0,LSL#5
        LDR     r2,[r3,#inused]
        CMP     r2,#SIZE
        MOVEQ   r0,#-1
        ORREQS  pc,r14,#C_Bit

        ; Add one to buffer count
        ADD     r2,r2,#1
        STR     r2,[r3,#inused]

        ; Put data and increment head
        LDR     r2,pointer_inputbuffers
        ADD     r0,r2,r0,LSL#SIZESHIFT
        LDR     r2,[r3,#inhead]
        STRB    r1,[r0,r2]
        ADD     r2,r2,#1
        CMP     r2,#SIZE
        MOVEQ   r2,#0
        STR     r2,[r3,#inhead]

        MOV     r0,#0
        BICS    pc,r14,#C_Bit

;
; Output read
;
; in  r0 - line number
; out r0 - next byte or -1 if no bytes
;
outputread
        CMP     r0,#15
        MOVGT   pc,r14

        ; Check there is stuff there
        LDR     r1,pointer_linestatus
        ADD     r1,r1,r0,LSL#5
        LDR     r2,[r1,#outfree]
        CMP     r2,#SIZE
        MOVEQ   r0,#-1
        ORREQS  pc,r14,#C_Bit

        ; Add one to buffer freecount
        ADD     r2,r2,#1
        STR     r2,[r1,#outfree]

        ; Get data and increment tail
        LDR     r3,pointer_outputbuffers
        ADD     r3,r3,r0,LSL#SIZESHIFT
        LDR     r2,[r1,#outtail]
        LDRB    r0,[r3,r2]
        ADD     r2,r2,#1
        CMP     r2,#SIZE
        MOVEQ   r2,#0
        STR     r2,[r1,#outtail]

        BICEQS  pc,r14,#C_Bit

;
; Reset state
;
; in  r0 - line number
;
resetstate
        CMP     r0,#15
        MOVGT   pc,r14

        LDR     r2,pointer_linestatus
        MOV     r1,#0
        STRB    r1,[r2,r0,LSL#5]

        MOV     pc,r14

;--- The end! -----------------------------------------------------------------

        END
